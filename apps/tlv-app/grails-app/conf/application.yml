# If there is a version to denote, set it here
about:
    contactEmail: knaquin@radiantsolutions.com
    release: Laguna
    releaseNumber: 2.8.2

# If there a page banner is needed, set it here
#banner:
#    backgroundColor: darkgray
#    description: This application is subject to change without notice.
#    enabled: true
#    text: BETA
#    textColor: white

# List any base layers that may be available
#baseLayers:
#    o2Mosaic:
#        layer: WorldGeographic
#        matrixSet: WorldGeographic
#        name: O2 Mosaic
#        projection: EPSG:4326
#        style: default
#        type: wmts
#        visible: false
#        url: ${baseUrl}/omar-wmts/wmts/getTile
#    osmBasic:
#        layers: o2-basemap-basic
#        name: OSM Basic
#        styles:
#        type: wms
#        url: ${baseUrl}/omar-mapproxy/service
#        visible: false
#    osmBright:
#        layers: o2-basemap-bright
#        name: OSM Bright
#        styles:
#        type: wms
#        visible: true
#        url: ${baseUrl}/omar-mapproxy/service
#    googleMaps:
#        name: Google Maps
#        type: xyz
#        url: https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}
#        visibility: false
#    googleSatellite:
#        name: Google Satellite
#        type: xyz
#        url: http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}
#        visible: false
#    googleSatelliteHybrid:
#        name: Google Satellite Hybrid
#        type: xyz
#        url: https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}
#        visible: false
#    googleTerrain:
#        name: Google Terrain
#        type: xyz
#        url: https://mt1.google.com/vt/lyrs=t&x={x}&y={y}&z={z}
#        visible: false
#    googleRoads:
#        name: Google Roads
#        type: xyz
#        url: https://mt1.google.com/vt/lyrs=h&x={x}&y={y}&z={z}
#        visible: false

# Define the base URL to be used throughout the configuration
baseUrl: https://omar.ossim.io

# If BEs are available, define the WFS query schema
#beLookup:
#    columnName: be_number
#    typeName: omar:facility
#    url: ${baseUrl}/omar-wfs/wfs

# Provide a demo location if desired
#demoLocation: Paris, FR

# If documentation is available, define the URL
docsUrl: ${baseUrl}/omar-docs

# If the twofishes geocoder is available, define the URL
geocoderUrl: ${baseUrl}/twofishes

# If there is an available token for Cesium terrain, define it here
#ionAccessToken: <token>

# If any keystores are needed to proxy requests
#keyStores:
#    keyStore:
#        filename: /data/keyStore.jks
#        password: <password>
#    trustStore:
#        filename: /data/trustStore.jks
#        password: <password>

# If there any feature layers available, list them here
#layers:
#    countries:
#        label: Country Borders
#        url: ${baseUrl}/omar-wfs/wfs/getFeature
#        params:
#            maxFeatures: 1000
#            outputFormat: JSON
#            request: GetFeature
#            service: WFS
#            typeName: omar:country_border
#            version: 1.1.0
#        refresh: false
#        style:
#            text:
#                label: name
#                color: white
#    o2-wfs:
#        label: O2 WFS
#        url: ${baseUrl}/omar-wfs/wfs/getFeature
#        params:
#            filter: BBOX(ground_geom,<BBOX>)
#            maxFeatures: 1000
#            outputFormat: JSON
#            request: GetFeature
#            service: WFS
#            sortBy: acquisition_date+D
#            typeName: omar:raster_entry
#            version: 1.1.0
#        refresh: true
#        style:
#            stroke:
#                color: yellow
#            text:
#                color: yellow
#                label: image_id

# List the various repository details
# You need at least one
libraries:
    o2:
        kmlUrl: ${baseUrl}/omar-superoverlay/superOverlay/createKml
        label: O2
        mensaUrl: ${baseUrl}/omar-mensa/mensa
        omsUrl: ${baseUrl}/omar-oms/imageSpace
        stagerUrl: ${baseUrl}/omar-stager/
        wfsUrl: ${baseUrl}/omar-wfs/wfs
        wmsUrl: ${baseUrl}/omar-wms/wms
#    o2-prod:
#        kmlUrl: https://omar.ossim.io/omar-superoverlay/superOverlay/createKml
#        label: O2
#        mensaUrl: https://omar.ossim.io/omar-mensa/mensa
#        omsUrl: https://omar.ossim.io/omar-oms/imageSpace
#        stagerUrl: https://omar.ossim.io/omar-stager/
#        wfsUrl: https://omar.ossim.io/omar-wfs/wfs
#        wmsUrl: https://omar.ossim.io/omar-wms/wms

# Set the security classification banner here
#securityClassification:
#    backgroundColor: green
#    classification: UNCLASSIFIED
#    textColor: white

# Set the context path of the application
server:
    contextPath: /tlv

swagger:
  schemes:
    - HTTPS
    - HTTP

templates:
    default:
        header:
            height: 10%
            logo: tlv.png
            northArrow: north-arrow.png
            text:
                securityClassification:
                    defaultValue: tlv.layers[ tlv.currentLayer ].metadata.security_classification
                    style:
                        color: "#add8e6"
                        height: 25%
                title:
                    defaultValue: tlv.layers[ tlv.currentLayer ].imageId
                    style:
                        color: "#ffff00"
                        height: 43%
                description:
                    defaultValue: '"CC: " + tlv.layers[ tlv.currentLayer ].metadata.country_code'
                    style:
                        color: "#ffffff"
                        height: 32%
        footer:
            height: 3%
            text:
                securityClassification:
                    defaultValue: Security Classification
                    style:
                        color: "#add8e6"
                        text-align: left
                location:
                    defaultValue: 'getMapCenterText( "dms" )'
                    style:
                        color: "#add8e6"
                        text-align: center
                acquisitionDate:
                    defaultValue: tlv.layers[ tlv.currentLayer ].acquisitionDate
                    style:
                        color: "#add8e6"
                        text-align: right

# If a terrain server is available, define the URL
#terrainProvider: //assets.agi.com/stk-terrain/world

# If access requires a PKI, define how to get the username here
#userInfo:
#    requestHeaderUserName: username
#    requestHeaderUserNameDefault: Anonymous

---
grails:
    profile: web
    codegen:
        defaultPackage: time_lapse
    spring:
        transactionManagement:
            proxies: false
    gorm:
        reactor:
            # Whether to translate GORM events into Reactor events
            # Disabled by default for performance reasons
            events: false
info:
    app:
        name: '@info.app.name@'
        version: '@info.app.version@'
        grailsVersion: '@info.app.grailsVersion@'
spring:
    main:
        banner-mode: "off"
    groovy:
        template:
            check-template-location: false

# Spring Actuator Endpoints are Disabled by Default
endpoints:
    enabled: true
    jmx:
        enabled: true

---
grails:
    mime:
        disable:
            accept:
                header:
                    userAgents:
                        - Gecko
                        - WebKit
                        - Presto
                        - Trident
        types:
            all: '*/*'
            atom: application/atom+xml
            css: text/css
            csv: text/csv
            form: application/x-www-form-urlencoded
            html:
              - text/html
              - application/xhtml+xml
            js: text/javascript
            json:
              - application/json
              - text/json
            multipartForm: multipart/form-data
            pdf: application/pdf
            rss: application/rss+xml
            text: text/plain
            hal:
              - application/hal+json
              - application/hal+xml
            xml:
              - text/xml
              - application/xml
    urlmapping:
        cache:
            maxsize: 1000
    controllers:
        defaultScope: singleton
    converters:
        encoding: UTF-8
    views:
        default:
            codec: html
        gsp:
            encoding: UTF-8
            htmlcodec: xml
            codecs:
                expression: html
                scriptlets: html
                taglib: none
                staticparts: none
endpoints:
    jmx:
        unique-names: true

---
hibernate:
    cache:
        queries: false
        use_second_level_cache: false
        use_query_cache: false
dataSource:
    pooled: true
    jmxExport: true
    driverClassName: org.h2.Driver
    username: sa
    password: ''

environments:
    development:
        dataSource:
            dbCreate: create-drop
            url: jdbc:h2:mem:devDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
    test:
        dataSource:
            dbCreate: update
            url: jdbc:h2:mem:testDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
    production:
        grails.dbconsole.enabled: true
        dataSource:
            dbCreate: update
            url: jdbc:h2:./prodDb;MVCC=TRUE;LOCK_TIMEOUT=10000;DB_CLOSE_ON_EXIT=FALSE
            properties:
                jmxEnabled: true
                initialSize: 5
                maxActive: 50
                minIdle: 5
                maxIdle: 25
                maxWait: 10000
                maxAge: 600000
                timeBetweenEvictionRunsMillis: 5000
                minEvictableIdleTimeMillis: 60000
                validationQuery: SELECT 1
                validationQueryTimeout: 3
                validationInterval: 15000
                testOnBorrow: true
                testWhileIdle: true
                testOnReturn: false
                jdbcInterceptors: ConnectionState
                defaultTransactionIsolation: 2 # TRANSACTION_READ_COMMITTED
