info:
  app:
    name: '@info.app.name@'
    version: '@info.app.version@'
    grailsVersion: '@info.app.grailsVersion@'

dataSource:
  driverClassName: org.postgresql.Driver
  username: ${omarDb.username}
  password: ${omarDb.password}
  pooled: true
  jmxExport: true

environments:
  development:
    dataSource:
      dbCreate: create-drop
      url: jdbc:postgresql://${omarDb.host}:${omarDb.port}/${omarDb.name}
  test:
    dataSource:
      dbCreate: update
      url: jdbc:postgresql://${omarDb.host}:${omarDb.port}/${omarDb.name}
  production:
    dataSource:
      dbCreate: none
      url: jdbc:postgresql://${omarDb.host}:${omarDb.port}/${omarDb.name}
      properties:
        jmxEnabled: true
        initialSize: 5
        maxActive: 50
        minIdle: 5
        maxIdle: 25
        maxWait: 10000
        maxAge: 600000
        timeBetweenEvictionRunsMillis: 5000
        minEvictableIdleTimeMillis: 60000
        validationQuery: SELECT 1
        validationQueryTimeout: 3
        validationInterval: 15000
        testOnBorrow: true
        testWhileIdle: true
        testOnReturn: false
        jdbcInterceptors: ConnectionState
        defaultTransactionIsolation: 2 # TRANSACTION_READ_COMMITTED

grails:
  gorm:
    reactor:
      events: false
  mime:
    disable:
      accept:
        header:
          userAgents:
            - Gecko
            - WebKit
            - Presto
            - Trident
    types:
      all: '*/*'
      atom: application/atom+xml
      css: text/css
      csv: text/csv
      form: application/x-www-form-urlencoded
      html:
        - text/html
        - application/xhtml+xml
      js: text/javascript
      json:
        - application/json
        - text/json
      multipartForm: multipart/form-data
      pdf: application/pdf
      rss: application/rss+xml
      text: text/plain
      hal:
        - application/hal+json
        - application/hal+xml
      xml:
        - text/xml
        - application/xml
  views:
    gsp:
      encoding: UTF-8
      htmlcodec: xml
      codecs:
        expression: html
        scriptlet: html
        taglib: none
        staticparts: none
    default:
      codec: html
hibernate:
  hbm2ddl:
    auto: update
  cache:
    queries: false
    use_second_level_cache: false
    use_query_cache: false
  dialect: org.hibernate.spatial.dialect.postgis.PostgisDialect

---
grails:
  cors:
    enabled: true
  resources:
    pattern: '/**'
  plugin:
    console:
      enabled: true
      csrfProtection:
        enabled: false

server:
  port: 8090
  servlet:
    context-path: /tlv
management:
  endpoints:
    enabled-by-default: true
    web:
      base-path: '/actuator'
      exposure:
        include: '*'
environments:
  production:
    spring:
      h2:
        console:
          enabled: true
          settings:
            web-allow-others: true
---
omarDb:
  host: localhost
  port: 5432
  username: postgres  
  password: postgres

environments:
  development:
    omarDb:
      name: omardb-dev
  production:
    omarDb:
      name: omardb-prod            
swagger:
    schemes:
        - HTTPS
        - HTTP
# If there is a version to denote, set it here
about:
    contactEmail: kevin.naquin@maxar.com
    release: Miami
    releaseNumber: 2.9.0

# If there a page banner is needed, set it here
#banner:
#    backgroundColor: darkgray
#    description: This application is subject to change without notice.
#    enabled: true
#    text: BETA
#    textColor: white

# List any base layers that may be available
baseLayers:
#    o2Mosaic:
#        layer: WorldGeographic
#        matrixSet: WorldGeographic
#        name: O2 Mosaic
#        projection: EPSG:4326
#        style: default
#        type: wmts
#        visible: false
#        urls: ${baseUrl}/omar-wmts/wmts/getTile
#    osmBasic:
#        layers: o2-basemap-basic
#        name: OSM Basic
#        styles:
#        type: wms
#        urls: ${baseUrl}/omar-mapproxy/service
#        visible: false
#    osmBright:
#        layers: o2-basemap-bright
#        name: OSM Bright
#        styles:
#        type: wms
#        visible: true
#        urls: ${baseUrl}/omar-mapproxy/service
#    googleMaps:
#        name: Google Maps
#        type: xyz
#        urls: https://mt1.google.com/vt/lyrs=r&x={x}&y={y}&z={z}
#        visibility: false
#    googleSatellite:
#        name: Google Satellite
#        type: xyz
#        urls: http://www.google.cn/maps/vt?lyrs=s@189&gl=cn&x={x}&y={y}&z={z}
#        visible: false
#    googleSatelliteHybrid:
#        name: Google Satellite Hybrid
#        type: xyz
#        urls: https://mt1.google.com/vt/lyrs=y&x={x}&y={y}&z={z}
#        visible: false
#    googleTerrain:
#        name: Google Terrain
#        type: xyz
#        urls: https://mt1.google.com/vt/lyrs=t&x={x}&y={y}&z={z}
#        visible: false
#    googleRoads:
#        name: Google Roads
#        type: xyz
#        urls: https://mt1.google.com/vt/lyrs=h&x={x}&y={y}&z={z}
#        visible: false

# Define the base URL to be used throughout the configuration
baseUrl: https://omar-dev.ossim.io

# If BEs are available, define the WFS query schema
#beLookup:
#    columnName: be_number
#    typeName: omar:facility
#    url: ${baseUrl}/omar-wfs/wfs

# Provide a demo location if desired
#demoLocation: Paris, FR

# If documentation is available, define the URL
docsUrl: ${baseUrl}/omar-docs/

# If the twofishes geocoder is available, define the URL
geocoderUrl: ${baseUrl}/twofishes/

# If there is an available token for Cesium terrain, define it here
#ionAccessToken: <token>

# If any keystores are needed to proxy requests
#keyStores:
#    keyStore:
#        filename: /data/keyStore.jks
#        password: <password>
#    trustStore:
#        filename: /data/trustStore.jks
#        password: <password>

# If there any feature layers available, list them here
#layers:
#    countries:
#        label: Country Borders
#        url: ${baseUrl}/omar-wfs/wfs/getFeature
#        params:
#            maxFeatures: 1000
#            outputFormat: JSON
#            request: GetFeature
#            service: WFS
#            typeName: omar:country_border
#            version: 1.1.0
#        refresh: false
#        style:
#            text:
#                label: name
#                color: white
#    o2-wfs:
#        label: O2 WFS
#        url: ${baseUrl}/omar-wfs/wfs/getFeature
#        params:
#            filter: BBOX(ground_geom,<BBOX>)
#            maxFeatures: 1000
#            outputFormat: JSON
#            request: GetFeature
#            service: WFS
#            sortBy: acquisition_date+D
#            typeName: omar:raster_entry
#            version: 1.1.0
#        refresh: true
#        style:
#            stroke:
#                color: yellow
#            text:
#                color: yellow
#                label: image_id

# List the various repository details
# You need at least one
libraries:
    o2:
        kmlUrl: ${baseUrl}/omar-superoverlay/superOverlay/createKml
        label: O2
        mensaUrl: ${baseUrl}/omar-mensa/mensa
        omsUrl: ${baseUrl}/omar-oms/imageSpace
        stagerUrl: ${baseUrl}/omar-stager/
        wfsUrl: ${baseUrl}/omar-wfs/wfs
        wmsUrls: ${baseUrl}/omar-wms/wms
#    o2-prod:
#        kmlUrl: https://omar.ossim.io/omar-superoverlay/superOverlay/createKml
#        label: O2
#        mensaUrl: https://omar.ossim.io/omar-mensa/mensa
#        omsUrl: https://omar.ossim.io/omar-oms/imageSpace
#        stagerUrl: https://omar.ossim.io/omar-stager/
#        wfsUrl: https://omar.ossim.io/omar-wfs/wfs
#        wmsUrls: https://a-omar.ossim.io/omar-wms/wms,https://b-omar.ossim.io/omar-wms/wms

reachbackUrl: ${baseUrl}/omar-reachback/index

# Set the security classification banner here
#securityClassification:
#    backgroundColor: green
#    classification: UNCLASSIFIED
#    textColor: white

# Uncomment this to add your own security classification function
securityClassificationFunction: |
    function x() {
        return tlv.layers[ tlv.currentLayer ].metadata.security_classification;
    }
    x();
templates:
    default:
        header:
            height: 10%
            logo: tlv.png
            northArrow: north-arrow.png
            text:
                securityClassification:
                    defaultValue: tlv.securityClassificationFunction
                    style:
                        color: add8e6
                        height: 25%
                title:
                    defaultValue: tlv.layers[ tlv.currentLayer ].imageId
                    style:
                        color: ffff00
                        height: 43%
                description:
                    defaultValue: '"CC: " + tlv.layers[ tlv.currentLayer ].metadata.country_code'
                    style:
                        color: ffffff
                        height: 32%
        footer:
            height: 3%
            text:
                securityClassification:
                    defaultValue: tlv.securityClassificationFunction
                    style:
                        align: left
                        color: add8e6
                location:
                    defaultValue: 'getMapCenterText( "dms" )'
                    style:
                        align: center
                        color: add8e6
                acquisitionDate:
                    defaultValue: tlv.layers[ tlv.currentLayer ].acquisitionDate
                    style:
                        align: right
                        color: add8e6


# If a terrain server is available, define the URL
#terrainProvider: //assets.agi.com/stk-terrain/world

# If access requires a PKI, define how to get the username here
userInfo:
    requestHeaderUserName: username
    requestHeaderUserNameDefault: Anonymous

---
defaultPreferences:
    defaultUsername: Anonymous

requestHeaderUsername: username            
